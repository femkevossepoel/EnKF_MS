module m_assimilation_old

contains

subroutine assimilation_old(obs,win,winref,DA,tini,tfin,nrobs,iter,obsoloc,obsaloc,obsotimes,obsatimes)
   use mod_dimensions
   use mod_state
   use mod_observation
   use m_readinfile
   use m_enkfprep
   use m_getD
   use m_wtime
   implicit none
   integer, intent(in) :: nrobs
   integer, intent(in) :: iter
   type(state),    intent(inout) :: win(0:nrt,nrens)
   type(state),    intent(in) :: winref(0:nrt)
   type(observation),  intent(in):: obs(nrobs)
   integer, intent(in) :: tini
   integer, intent(in) :: tfin
   integer, intent(in) :: obsoloc(nro)
   integer, intent(in) :: obsaloc(nra)
   integer, intent(in) :: obsotimes(nrt)
   integer, intent(in) :: obsatimes(nrt)
   real,  intent(in) :: DA(nrobs,nrens)

   real start,finish,cpu0,cpu1
   logical, allocatable :: globobs(:,:)

   real, allocatable :: Y(:,:)
   real, allocatable :: S(:,:)
   real, allocatable :: E(:,:)
   real, allocatable :: D(:,:)
   real, allocatable :: R(:,:)
   real, allocatable :: meanS(:)
   real, allocatable :: innov(:)

   real, allocatable, dimension(:,:)   :: subS,subE,subD, subR
   real, allocatable, dimension(:)     :: subinnov,corrA,corrO
   real, allocatable, dimension(:,:,:)   :: subwin
   logical, allocatable ::  lobs(:)           ! active measurements
   integer nobs,i,j,l,m
   real stdA,aveA,stdO,aveO,stdS


   allocate(Y(nrobs,nrens))
   allocate(S(nrobs,nrens))
   allocate(E(nrobs,nrens))
   allocate(D(nrobs,nrens))
   allocate(R(nrobs,nrobs))
   allocate(meanS(nrobs))
   allocate(innov(nrobs))
   allocate(lobs(nrobs))



   print '(tr5,a,i3,a)','main: iter=',iter,' -> Calling enkf preprep'
   ! Returns all matrices UNSCALED by sqrt(nrens-1) for use in analysis.F90
   call enkfprep(obs,Y,S,E,D,DA,meanS,R,innov,winref,win,nrobs,&
                 tini,tfin,obsoloc,obsaloc,obsotimes,obsatimes)
   D=D-Y

   print *,'Analysis:',local
   cpu0=wtime()
   call cpu_time(start); print '(a)','analysis start:'

   if (local==0) then
      print '(tr5,a,2(i3,a))','main: iter=',iter,' -> Calling analysis with mode: ',mode_analysis
      allocate(subwin(ndim,tini:tfin,nrens))
      do j=1,nrens
      do l=tini,tfin
         subwin(1:nx,l,j)=win(l,j)%Atmos(1:nx)
         subwin(nx+1:2*nx,l,j)=win(l,j)%Ocean(1:nx)
      enddo
      enddo

      call analysis(subwin, R, E, S, D, innov, ndim*(nrw+1), nrens, nrobs, .true., truncation, mode_analysis, &
                              lrandrot, lupdate_randrot, lsymsqrt, inflate, infmult, 1)

      do j=1,nrens
      do l=tini,tfin
         win(l,j)%Atmos(1:nx)=subwin(1:nx,l,j)
         win(l,j)%Ocean(1:nx)=subwin(nx+1:2*nx,l,j)
      enddo
      enddo
      deallocate(subwin)

   else
      print '(a,2i2,f10.2)','       enkf: calling local analysis with mode: ',mode_analysis,local,obs_radius,obs_truncation

      allocate(globobs(nx,nrobs))
      globobs(:,:)=.false.

! Distace based localization
      if (local == 1) then
         do i=1,nx
            nobs(:)=0
            lobs(:)=.false.

            do m=1,nrobs
               if (real(abs(obs(m)%xloc-i)) < obs_radius) then
                  lobs(m)=.true.
                  globobs(i,m)=.true.
                  nobs=nobs+1
               endif
            enddo
            if (i==nx/2)  print *,'number of local measurements for i=',i,nobs
         enddo
      endif

!! Adaptive localization
         if (local == 2) then
      if (local== 2) allocate(corrA(nrobs), corrO(nrobs))
            stdA=0.0
            aveA=0.0
            stdO=0.0
            aveO=0.0
            do j=1,nrens
               aveA=aveA+win(tfin,j)%Atmos(i)
               aveO=aveO+win(tfin,j)%Ocean(i)
               stdA=stdA+win(tfin,j)%Atmos(i)**2
               stdO=stdO+win(tfin,j)%Ocean(i)**2
            enddo
            aveA=aveA/real(nrens)
            aveO=aveO/real(nrens)
            stdA=stdA/real(nrens)
            stdO=stdO/real(nrens)

            stdA=stdA-aveA**2
            stdO=stdO-aveO**2

            stdA=sqrt(stdA)
            stdO=sqrt(stdO)

            do m=1,nrobs
               corrA(m)=0.0
               corrO(m)=0.0
               stdS=0.0
               do j=1,nrens
                  stdS=stdS+S(m,j)**2
                  corrA(m)=corrA(m)+S(m,j)*win(tfin,j)%Atmos(i)
                  corrO(m)=corrO(m)+S(m,j)*win(tfin,j)%Ocean(i)
               enddo
               stdS=stdS/real(nrens)
               stdS=sqrt(stdS)

               corrA(m)=corrA(m)/real(nrens)
               corrO(m)=corrO(m)/real(nrens)
               corrA(m)=corrA(m)/(stdS*stdA+tiny(stdA))
               corrO(m)=corrO(m)/(stdS*stdO+tiny(stdA))
            enddo

            do m=1,nrobs
               if ((abs(corrA(m)) > obs_truncation) .or. (abs(corrO(m)) > obs_truncation)) then
                  lobs(m)=.true.
                  nobs=nobs+1
                  globobs(i,m)=1
               endif
            enddo
            if (i==nx/2)  print *,'number of local measurements for i=',i,nobs
         endif


         if (nobs > 0) then
            allocate(subD(nobs,nrens))
            allocate(subE(nobs,nrens))
            allocate(subS(nobs,nrens))
            allocate(subinnov(nobs))
            allocate(subR(nobs,nobs))
            call getD(D,subD,nrobs,nrens,lobs,nobs) ! the innovations
            call getD(E,subE,nrobs,nrens,lobs,nobs) ! the observation errors
            call getD(S,subS,nrobs,nrens,lobs,nobs) ! the HA'

            allocate(subwin(2,tini:tfin,nrens))
            do j=1,nrens
            do l=tini,tfin
               subwin(1,l,j)=win(l,j)%Atmos(i)
               subwin(2,l,j)=win(l,j)%Ocean(i)
            enddo
            enddo

             call analysis(subwin, subR, subE, subS, subD, subinnov, 2*(tfin-tini+1), nrens, nobs,&
                           .false., truncation, mode_analysis, &
                           lrandrot, lupdate_randrot, lsymsqrt, inflate, infmult, 1)

            do j=1,nrens
            do l=tini,tfin
               win(l,j)%Atmos(i)=subwin(1,l,j)
               win(l,j)%Ocean(i)=subwin(2,l,j)
            enddo
            enddo

            deallocate(subD, subE, subS, subinnov, subR, subwin)
         endif

      enddo

      cpu1=wtime()
      call cpu_time(finish); print '(a)','local finish:'
      print '(2(a,f6.2))','local: cpu time=',finish-start,', wall-clock time=',cpu1-cpu0

      if (local== 2) deallocate(corrA, corrO)

!      if (local== 2) then
!         open(10,file='globobs.dat')
!            do i=1,nx
!               write(10,'(1000i1)')globobs(i,:)
!            enddo
!         close(10)
!         deallocate(globobs)
!      endif


   endif
   deallocate(Y,S,E,D,R,meanS,innov)

end subroutine
end module
